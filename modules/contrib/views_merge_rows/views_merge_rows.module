<?php

/**
 * @file
 * Registers View API information.
 */

use Drupal\views\ViewExecutable;
use Drupal\Core\Url;

/**
 * Implements hook_theme().
 */
function views_merge_rows_theme($existing, $type, $theme, $path) {
  $base = [
    'render element' => 'form',
    'path' => drupal_get_path('module', 'views_merge_rows') . '/templates',
  ];

  return ['merge_rows_theme' => $base + ['template' => 'merge-rows-theme']];
}

/**
 * Implements hook_views_pre_render().
 *
 * Merges the rows according to the settings for current display.
 */
function views_merge_rows_views_pre_render(ViewExecutable $view) {
  $items_per_page = get_items_per_page_for_current_display($view);

  $extender = $view->display_handler->getExtenders()['views_merge_rows'];
  if (isset($extender)) {
    $options = $extender->getOptions();
  }
  else {
    $options = NULL;
  }

  if (!is_null($options) && $options['merge_rows'] && $items_per_page > 0) {
    $view->setItemsPerPage(0);
  }
  if (!is_null($options) && $options['merge_rows'] != FALSE) {
    $view->style_plugin->renderFields($view->result);
    $rendered_fields = $view->style_plugin->getRenderedFields();

    $filters = [];
    $merged_rows = [];

    // Necessary for 'count_minus_count_unique'. Not used anywhere else.
    $merged_rows_copy = [];
    $first = TRUE;

    foreach ((array) $rendered_fields as $row_index => $rendered_row) {
      $filter_value = '';
      foreach ($options['field_config'] as $field_name => $field_config) {
        if ($field_config['merge_option'] == 'filter') {
          $filter_value .= $rendered_row[$field_name];
        }
      }
      $is_filter_row = [];

      if (!array_key_exists($filter_value, $filters)) {
        $filters[$filter_value] = $row_index;
        $merged_row = [];
        $merged_row_copy = [];
        $is_filter_row[$row_index] = TRUE;
        $merged_row_index = $row_index;
      }
      else {
        $merged_row_index = $filters[$filter_value];
        $merged_row = $merged_rows[$merged_row_index];
        if (isset($merged_rows_copy[$merged_row_index])) {
          $merged_row_copy = $merged_rows_copy[$merged_row_index];
        }
        $is_filter_row[$row_index] = FALSE;
      }
      foreach ($options['field_config'] as $field_name => $field_config) {
        switch ($field_config['merge_option']) {
          case 'count_unique':
            views_merge_rows_pre_render_count_unique($view, $merged_rows, $merged_row, $is_filter_row[$row_index], $rendered_row, $row_index, $field_name, $merged_row_index);
            break;

          case 'count':
            views_merge_rows_pre_render_count($view, $merged_rows, $merged_row, $is_filter_row[$row_index], $row_index, $field_name, $merged_row_index);
            break;

          case 'count_minus_count_unique':
            if ($first) {
              $merged_row_copy = $merged_row;
              $first = FALSE;
            }
            views_merge_rows_pre_render_count_minus_count_unique($view, $merged_rows, $merged_rows_copy, $merged_row, $merged_row_copy, $is_filter_row[$row_index], $rendered_row, $row_index, $field_name, $merged_row_index);
            break;

          case 'merge_unique':
            views_merge_rows_pre_render_merge_unique($view, $merged_rows, $merged_row, $is_filter_row[$row_index], $rendered_row, $row_index, $field_name, $merged_row_index);
            break;

          case 'merge':
            views_merge_rows_pre_render_merge($view, $merged_rows, $merged_row, $is_filter_row[$row_index], $rendered_row, $row_index, $field_name, $merged_row_index);
            break;

          case 'sum':
            views_merge_rows_pre_render_sum($view, $merged_rows, $merged_row, $is_filter_row[$row_index], $rendered_row, $row_index, $field_name, $merged_row_index);
            break;

          case 'average':
            views_merge_rows_pre_render_average($view, $merged_rows, $merged_row, $is_filter_row[$row_index], $rendered_row, $row_index, $field_name, $merged_row_index);
            break;

          case 'std_deviation':
            views_merge_rows_pre_render_std_deviation($view, $merged_rows, $merged_row, $is_filter_row[$row_index], $rendered_row, $row_index, $field_name, $merged_row_index);
            break;

          case 'filter':
            views_merge_rows_pre_render_filter($view, $merged_rows, $merged_row, $is_filter_row[$row_index], $rendered_row, $row_index, $field_name, $merged_row_index);
            break;

          case 'first_value':
            views_merge_rows_pre_render_first_value($view, $merged_rows, $merged_row, $is_filter_row[$row_index], $rendered_row, $row_index, $field_name, $merged_row_index);
            break;

          case 'highest_value':
            views_merge_rows_pre_render_highest_value($view, $merged_rows, $merged_row, $merged_row_replaced, $is_filter_row[$row_index], $rendered_row, $row_index, $field_name, $merged_row_index);
            break;

          case 'lowest_value':
            views_merge_rows_pre_render_lowest_value($view, $merged_rows, $merged_row, $merged_row_replaced, $is_filter_row[$row_index], $rendered_row, $row_index, $field_name, $merged_row_index);
            break;

        }
      }
    }

    // Store the merged rows back to the view's style plugin.
    foreach ($merged_rows as $row_index => $merged_row) {
      foreach ($options['field_config'] as $field_name => $field_config) {
        switch ($field_config['merge_option']) {
          case 'count_unique':
            views_merge_rows_render_count_unique($view, $merged_row, $row_index, $field_name);
            break;

          case 'count':
            views_merge_rows_render_count($view, $merged_row, $row_index, $field_name);
            break;

          case 'count_minus_count_unique':
            views_merge_rows_render_count_minus_count_unique($view, $merged_row, $merged_rows_copy, $row_index, $field_name);
            break;

          case 'merge_unique':
            views_merge_rows_render_merge_unique($view, $merged_row, $row_index, $field_name, $field_config);
            break;

          case 'merge':
            views_merge_rows_render_merge($view, $merged_row, $row_index, $field_name, $field_config);
            break;

          case 'sum':
            views_merge_rows_render_sum($view, $merged_row, $row_index, $field_name);
            break;

          case 'average':
            views_merge_rows_render_average($view, $merged_row, $row_index, $field_name);
            break;

          case 'std_deviation':
            views_merge_rows_render_std_deviation($view, $merged_row, $row_index, $field_name);
            break;

          case 'filter':
            views_merge_rows_render_filter($view, $merged_row, $row_index, $field_name);
            break;

          case 'first_value':
            views_merge_rows_render_first_value($view, $merged_row, $row_index, $field_name);
            break;

          case 'highest_value':
            views_merge_rows_render_highest_value($view, $merged_row, $row_index, $field_name);
            break;

          case 'lowest_value':
            views_merge_rows_render_lowest_value($view, $merged_row, $row_index, $field_name);
            break;

        }
      }
    }
  }
}

/**
 * Unsets the given row from the current display.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   View object.
 * @param int $row_index
 *   Supplied row index value.
 */
function views_merge_rows_unset_row(ViewExecutable $view, $row_index) {
  if (isset($view->result[$row_index])) {
    unset($view->result[$row_index]);
    --$view->total_rows;
  }

}

/**
 * Returns item per page for the current display.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   View object.
 *
 * @return int
 *   Returns number of items per page set for the current display of the view.
 */
function get_items_per_page_for_current_display(ViewExecutable $view) {
  $items_per_page = 0;

  $uri = \Drupal::request()->getRequestUri();
  $uri_parts = parse_url($uri);
  if (!empty($uri_parts['scheme'])) {
    $currentURI = Url::fromUri(\Drupal::request()->getRequestUri());
    if (isset($currentURI['query']['items_per_page'])) {
      $items_per_page = $currentURI['query']['items_per_page'];
    }
  }
  elseif (isset($view->pager->options['items_per_page'])) {
    $items_per_page = $view->getItemsPerPage();
  }
  elseif (isset($view->pager->options['type']) && $view->pager->options['type'] == 'none') {
    $items_per_page = 0;
  }
  // Check the default view.
  else {
    $items_per_page = $view->getItemsPerPage();
  }
  return $items_per_page;
}

/**
 * Manipulates data if merge option is 'count_unique'.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   View object.
 * @param array $merged_rows
 *   Array of merged rows.
 * @param array $merged_row
 *   Current merged row.
 * @param bool $is_filter_row
 *   TRUE if row merges rows of one or more filtered fields; FALSE otherwise.
 * @param array $rendered_row
 *   Row from $rendered_fields from which data is extracted.
 * @param int $row_index
 *   Row index to which data shall be reported if the row
 *   is a filtered one ($merged_rows).
 * @param string $field_name
 *   Name of the field being under work.
 * @param int $merged_row_index
 *   Row index to which data shall be reported if the row
 *   is not a filtered one ($merged_rows).
 */
function views_merge_rows_pre_render_count_unique(ViewExecutable $view, array &$merged_rows, array &$merged_row, $is_filter_row, array $rendered_row, $row_index, $field_name, $merged_row_index) {
  if ($is_filter_row) {
    if (!array_key_exists($field_name, $merged_row)) {
      $merged_row[$field_name] = [];
    }
    if (!in_array($rendered_row[$field_name], $merged_row[$field_name])) {
      $merged_row[$field_name][] = $rendered_row[$field_name];
    }
    $merged_rows[$row_index] = $merged_row;
  }
  else {
    if (!empty($rendered_row[$field_name]) && !in_array($rendered_row[$field_name], $merged_row[$field_name])) {
      $merged_row[$field_name][] = $rendered_row[$field_name];
    }
    views_merge_rows_unset_row($view, $row_index);
    $merged_rows[$merged_row_index] = $merged_row;
  }
}

/**
 * Manipulates data if merge option is 'count'.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   View object.
 * @param array $merged_rows
 *   Array of merged rows.
 * @param array $merged_row
 *   Current merged row.
 * @param bool $is_filter_row
 *   TRUE if row merges rows of one or more filtered fields; FALSE otherwise.
 * @param int $row_index
 *   Row index to which data shall be reported if the row
 *   is a filtered one ($merged_rows).
 * @param string $field_name
 *   Name of the field being under work.
 * @param int $merged_row_index
 *   Row index to which data shall be reported if the row
 *   is not a filtered one ($merged_rows).
 */
function views_merge_rows_pre_render_count(ViewExecutable $view, array &$merged_rows, array &$merged_row, $is_filter_row, $row_index, $field_name, $merged_row_index) {
  if ($is_filter_row) {
    $merged_row[$field_name] = 1;
    $merged_rows[$row_index] = $merged_row;
  }
  else {
    $merged_row[$field_name] = intval($merged_row[$field_name]) + 1;
    views_merge_rows_unset_row($view, $row_index);
    $merged_rows[$merged_row_index] = $merged_row;
  }
}

/**
 * Manipulates data if merge option is 'count_minus_count_unique'.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   View object.
 * @param array $merged_rows
 *   Array of merged rows. Used for 'count_unique' data manipulation.
 * @param array $merged_rows_copy
 *   Copy of $merged_rows. Used for 'count' data manipulation.
 * @param array $merged_row
 *   Current merged row. Used for 'count_unique' data manipulation.
 * @param array $merged_row_copy
 *   Current merged row. Used for 'count' data manipulation.
 * @param bool $is_filter_row
 *   TRUE if row merges rows of one or more filtered fields; FALSE otherwise.
 * @param array $rendered_row
 *   Row from $rendered_fields from which data is extracted.
 * @param int $row_index
 *   Row index to which data shall be reported if the row
 *   ($merged_rows).
 *   is a filtered one.
 * @param string $field_name
 *   Name of the field being under work.
 * @param int $merged_row_index
 *   Row index to which data shall be reported if the row
 *   is not a filtered one ($merged_rows).
 */
function views_merge_rows_pre_render_count_minus_count_unique(ViewExecutable $view, array &$merged_rows, array &$merged_rows_copy, array &$merged_row, array &$merged_row_copy, $is_filter_row, array $rendered_row, $row_index, $field_name, $merged_row_index) {
  if ($is_filter_row) {
    if (!array_key_exists($field_name, $merged_row)) {
      $merged_row[$field_name] = [];
    }
    if (!in_array($rendered_row[$field_name], $merged_row[$field_name])) {
      $merged_row[$field_name][] = $rendered_row[$field_name];
    }
    $merged_rows[$row_index] = $merged_row;
  }
  else {
    if (!empty($rendered_row[$field_name]) && !in_array($rendered_row[$field_name], $merged_row[$field_name])) {
      $merged_row[$field_name][] = $rendered_row[$field_name];
    }
    $merged_rows[$merged_row_index] = $merged_row;
  }

  if ($is_filter_row) {
    $merged_row_copy[$field_name] = 1;
    $merged_rows_copy[$row_index] = $merged_row_copy;
  }
  else {
    $merged_row_copy[$field_name] = intval($merged_row_copy[$field_name]) + 1;
    views_merge_rows_unset_row($view, $row_index);
    $merged_rows_copy[$merged_row_index] = $merged_row_copy;
  }
}

/**
 * Manipulates data if merge option is 'merge_unique'.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   View object.
 * @param array $merged_rows
 *   Array of merged rows.
 * @param array $merged_row
 *   Current merged row.
 * @param bool $is_filter_row
 *   TRUE if row merges rows of one or more filtered fields; FALSE otherwise.
 * @param array $rendered_row
 *   Row from $rendered_fields from which data is extracted.
 * @param int $row_index
 *   Row index to which data shall be reported if the row
 *   is a filtered one ($merged_rows).
 * @param string $field_name
 *   Name of the field being under work.
 * @param int $merged_row_index
 *   Row index to which data shall be reported if the row
 *   is not a filtered one ($merged_rows).
 */
function views_merge_rows_pre_render_merge_unique(ViewExecutable $view, array &$merged_rows, array &$merged_row, $is_filter_row, array $rendered_row, $row_index, $field_name, $merged_row_index) {
  if ($is_filter_row) {
    $merged_row[$field_name] = [$rendered_row[$field_name]];
    $merged_rows[$row_index] = $merged_row;
  }
  else {
    if (!empty($rendered_row[$field_name]) && !in_array($rendered_row[$field_name], $merged_row[$field_name])) {
      $merged_row[$field_name][] = $rendered_row[$field_name];
    }
    views_merge_rows_unset_row($view, $row_index);
    $merged_rows[$merged_row_index] = $merged_row;
  }
}

/**
 * Manipulates data if merge option is 'merge'.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   View object.
 * @param array $merged_rows
 *   Array of merged rows.
 * @param array $merged_row
 *   Current merged row.
 * @param bool $is_filter_row
 *   TRUE if row merges rows of one or more filtered fields; FALSE otherwise.
 * @param array $rendered_row
 *   Row from $rendered_fields from which data is extracted.
 * @param int $row_index
 *   Row index to which data shall be reported if the row
 *   is a filtered one ($merged_rows).
 * @param string $field_name
 *   Name of the field being under work.
 * @param int $merged_row_index
 *   Row index to which data shall be reported if the row
 *   is not a filtered one ($merged_rows).
 */
function views_merge_rows_pre_render_merge(ViewExecutable $view, array &$merged_rows, array &$merged_row, $is_filter_row, array $rendered_row, $row_index, $field_name, $merged_row_index) {
  if ($is_filter_row) {
    $merged_row[$field_name] = [$rendered_row[$field_name]];
    $merged_rows[$row_index] = $merged_row;
  }
  else {
    $merged_row[$field_name][] = $rendered_row[$field_name];
    views_merge_rows_unset_row($view, $row_index);
    $merged_rows[$merged_row_index] = $merged_row;
  }
}

/**
 * Manipulates data if merge option is 'sum'.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   View object.
 * @param array $merged_rows
 *   Array of merged rows.
 * @param array $merged_row
 *   Current merged row.
 * @param bool $is_filter_row
 *   TRUE if row merges rows of one or more filtered fields; FALSE otherwise.
 * @param array $rendered_row
 *   Row from $rendered_fields from which data is extracted.
 * @param int $row_index
 *   Row index to which data shall be reported if the row
 *   is a filtered one ($merged_rows).
 * @param string $field_name
 *   Name of the field being under work.
 * @param int $merged_row_index
 *   Row index to which data shall be reported if the row
 *   is not a filtered one ($merged_rows).
 */
function views_merge_rows_pre_render_sum(ViewExecutable $view, array &$merged_rows, array &$merged_row, $is_filter_row, array $rendered_row, $row_index, $field_name, $merged_row_index) {
  if ($is_filter_row) {
    $merged_row[$field_name] = [$rendered_row[$field_name]];
    $merged_rows[$row_index] = $merged_row;
  }
  else {
    $merged_row[$field_name][] = $rendered_row[$field_name];
    views_merge_rows_unset_row($view, $row_index);
    $merged_rows[$merged_row_index] = $merged_row;
  }
}

/**
 * Manipulates data if merge option is 'average'.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   View object.
 * @param array $merged_rows
 *   Array of merged rows.
 * @param array $merged_row
 *   Current merged row.
 * @param bool $is_filter_row
 *   TRUE if row merges rows of one or more filtered fields; FALSE otherwise.
 * @param array $rendered_row
 *   Row from $rendered_fields from which data is extracted.
 * @param int $row_index
 *   Row index to which data shall be reported if the row
 *   is a filtered one ($merged_rows).
 * @param string $field_name
 *   Name of the field being under work.
 * @param int $merged_row_index
 *   Row index to which data shall be reported if the row
 *   is not a filtered one ($merged_rows).
 */
function views_merge_rows_pre_render_average(ViewExecutable $view, array &$merged_rows, array &$merged_row, $is_filter_row, array $rendered_row, $row_index, $field_name, $merged_row_index) {
  if ($is_filter_row) {
    $merged_row[$field_name] = [$rendered_row[$field_name]];
    $merged_rows[$row_index] = $merged_row;
  }
  else {
    $merged_row[$field_name][] = $rendered_row[$field_name];
    views_merge_rows_unset_row($view, $row_index);
    $merged_rows[$merged_row_index] = $merged_row;
  }
}

/**
 * Manipulates data if merge option is 'std_deviation'.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   View object.
 * @param array $merged_rows
 *   Array of merged rows.
 * @param array $merged_row
 *   Current merged row.
 * @param bool $is_filter_row
 *   TRUE if row merges rows of one or more filtered fields; FALSE otherwise.
 * @param array $rendered_row
 *   Row from $rendered_fields from which data is extracted.
 * @param int $row_index
 *   Row index to which data shall be reported if the row
 *   is a filtered one ($merged_rows).
 * @param string $field_name
 *   Name of the field being under work.
 * @param int $merged_row_index
 *   Row index to which data shall be reported if the row
 *   is not a filtered one ($merged_rows).
 */
function views_merge_rows_pre_render_std_deviation(ViewExecutable $view, array &$merged_rows, array &$merged_row, $is_filter_row, array $rendered_row, $row_index, $field_name, $merged_row_index) {
  if ($is_filter_row) {
    $merged_row[$field_name] = [$rendered_row[$field_name]];
    $merged_rows[$row_index] = $merged_row;
  }
  else {
    $merged_row[$field_name][] = $rendered_row[$field_name];
    views_merge_rows_unset_row($view, $row_index);
    $merged_rows[$merged_row_index] = $merged_row;
  }
}

/**
 * Manipulates data if merge option is 'filter'.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   View object.
 * @param array $merged_rows
 *   Array of merged rows.
 * @param array $merged_row
 *   Current merged row.
 * @param bool $is_filter_row
 *   TRUE if row merges rows of one or more filtered fields; FALSE otherwise.
 * @param array $rendered_row
 *   Row from $rendered_fields from which data is extracted.
 * @param int $row_index
 *   Row index to which data shall be reported if the row
 *   is a filtered one ($merged_rows).
 * @param string $field_name
 *   Name of the field being under work.
 * @param int $merged_row_index
 *   Row index to which data shall be reported if the row
 *   is not a filtered one ($merged_rows).
 */
function views_merge_rows_pre_render_filter(ViewExecutable $view, array &$merged_rows, array &$merged_row, $is_filter_row, array $rendered_row, $row_index, $field_name, $merged_row_index) {
  if ($is_filter_row) {
    $merged_row[$field_name] = $rendered_row[$field_name];
    $merged_rows[$row_index] = $merged_row;
  }
  else {
    $merged_rows[$merged_row_index] = $merged_row;
  }
}

/**
 * Manipulates data if merge option is 'first_value'.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   View object.
 * @param array $merged_rows
 *   Array of merged rows.
 * @param array $merged_row
 *   Current merged row.
 * @param bool $is_filter_row
 *   TRUE if row merges rows of one or more filtered fields; FALSE otherwise.
 * @param array $rendered_row
 *   Row from $rendered_fields from which data is extracted.
 * @param int $row_index
 *   Row index to which data shall be reported if the row
 *   is a filtered one ($merged_rows).
 * @param string $field_name
 *   Name of the field being under work.
 * @param int $merged_row_index
 *   Row index to which data shall be reported if the row
 *   is not a filtered one ($merged_rows).
 */
function views_merge_rows_pre_render_first_value(ViewExecutable $view, array &$merged_rows, array &$merged_row, $is_filter_row, array $rendered_row, $row_index, $field_name, $merged_row_index) {
  if ($is_filter_row) {
    $merged_row[$field_name] = $rendered_row[$field_name];
    $merged_rows[$row_index] = $merged_row;
  }
  else {
    views_merge_rows_unset_row($view, $row_index);
    $merged_rows[$merged_row_index] = $merged_row;
  }
}

/**
 * Manipulates data if merge option is 'highest_value'.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   View object.
 * @param array $merged_rows
 *   Array of merged rows.
 * @param array $merged_row
 *   Current merged row.
 * @param bool $merged_row_replaced
 *   Indicates whether $merged_row has been replaced.
 * @param bool $is_filter_row
 *   TRUE if row merges rows of one or more filtered fields; FALSE otherwise.
 * @param array $rendered_row
 *   Row from $rendered_fields from which data is extracted.
 * @param int $row_index
 *   Row index to which data shall be reported if the row
 *   is a filtered one ($merged_rows).
 * @param string $field_name
 *   Name of the field being under work.
 * @param int $merged_row_index
 *   Row index to which data shall be reported if the row
 *   is not a filtered one($merged_rows).
 */
function views_merge_rows_pre_render_highest_value(ViewExecutable $view, array &$merged_rows, array &$merged_row, &$merged_row_replaced, $is_filter_row, array $rendered_row, $row_index, $field_name, $merged_row_index) {
  if ($is_filter_row) {
    $merged_row[$field_name] = $rendered_row[$field_name];
    $merged_rows[$row_index] = $merged_row;
  }
  else {
    // Strip the HTML from the rendered and merged fields data and grab
    // the raw value.
    $rendered_row_data = floatval((string) $rendered_row[$field_name]);
    $merged_row_data = floatval((string) $merged_row[$field_name]);

    // Place the higher value into the merged row array.
    if ($rendered_row_data > $merged_row_data) {
      $merged_row[$field_name] = $rendered_row[$field_name];
      $merged_row_replaced = TRUE;
    }
    // Remove the lower value row from the view.
    else {
      views_merge_rows_unset_row($view, $row_index);
      $merged_row_replaced = FALSE;
    }
  }

  // If we replaced the row with a higher value, then update all array
  // indexes with the new index values.
  if ($merged_row_replaced == TRUE) {
    $merged_rows[$row_index] = $merged_row;
    // Getting the items per page setting from the view display.
    $items_per_page = get_items_per_page_for_current_display($view);
    $total_items = $view->total_rows;
    // Getting pager values as per merged rows.
    $merged_rows_total_num = count($merged_rows);

    if ($items_per_page > 0 && $merged_rows_total_num > $items_per_page) {

      $current_page_num = isset($view->query->pager->current_page) ? $view->query->pager->current_page : 0;
      $page_rows = $all_pages = 0;
      foreach ($merged_rows as $row_index => $merged_row) {
        if ($page_rows >= $items_per_page) {
          $all_pages++;
          $page_rows = 1;
        }
        else {
          $page_rows++;
        }
        // Unsetting all results but the ones from current page.
        if ($all_pages != $current_page_num) {
          views_merge_rows_unset_row($view, $row_index);
        }
      }
      // Attaching the pager with correct values.
      pager_default_initialize($merged_rows_total_num, $items_per_page);
    }
    $view->total_rows = $total_items;
    $filters[$filter_value] = $row_index;

    // Remove the previous highest or lowest value from the view.
    views_merge_rows_unset_row($view, $merged_row_index);
  }
  $first_value = TRUE;
}

/**
 * Manipulates data if merge option is 'lowest_value'.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   View object.
 * @param array $merged_rows
 *   Array of merged rows.
 * @param array $merged_row
 *   Current merged row.
 * @param bool $merged_row_replaced
 *   Indicates whether $merged_row has been replaced.
 * @param bool $is_filter_row
 *   TRUE if row merges rows of one or more filtered fields; FALSE otherwise.
 * @param array $rendered_row
 *   Row from $rendered_fields from which data is extracted.
 * @param int $row_index
 *   Row index to which data shall be reported if the row
 *   is a filtered one ($merged_rows).
 * @param string $field_name
 *   Name of the field being under work.
 * @param int $merged_row_index
 *   Row index to which data shall be reported if the row
 *   is not a filtered one ($merged_rows).
 */
function views_merge_rows_pre_render_lowest_value(ViewExecutable $view, array &$merged_rows, array &$merged_row, &$merged_row_replaced, $is_filter_row, array $rendered_row, $row_index, $field_name, $merged_row_index) {
  if ($is_filter_row) {
    $merged_row = [];
    $merged_row[$field_name] = $rendered_row[$field_name];
    $merged_rows[$row_index] = $merged_row;
  }
  else {
    // Strip the HTML from the rendered and merged fields data and grab
    // the raw value.
    $rendered_row_data = floatval((string) $rendered_row[$field_name]);
    $merged_row_data = floatval((string) $merged_row[$field_name]);

    if (!isset($first_value)) {
      $first_value = TRUE;
    }
    // Place the lower value into the merged row array.
    if ($first_value && !empty($rendered_row[$field_name])) {
      $merged_row[$field_name] = $rendered_row[$field_name];
      $merged_row_replaced = TRUE;
      $first_value = FALSE;
    }
    elseif ($rendered_row_data <= $merged_row_data && !empty($rendered_row[$field_name])) {
      $merged_row[$field_name] = $rendered_row[$field_name];
      $merged_row_replaced = TRUE;
    }
    // Remove the higher value row from the view.
    else {
      views_merge_rows_unset_row($view, $row_index);
      $merged_row_replaced = FALSE;
    }
  }

  // If we replaced the row with a higher value, then update all array
  // indexes with the new index values.
  if ($merged_row_replaced == TRUE) {
    $merged_rows[$row_index] = $merged_row;
    // Getting the items per page setting from the view display.
    $items_per_page = get_items_per_page_for_current_display($view);
    $total_items = $view->total_rows;
    // Getting pager values as per merged rows.
    $merged_rows_total_num = count($merged_rows);

    if ($items_per_page > 0 && $merged_rows_total_num > $items_per_page) {

      $current_page_num = isset($view->query->pager->current_page) ? $view->query->pager->current_page : 0;
      $page_rows = $all_pages = 0;
      foreach ($merged_rows as $row_index => $merged_row) {
        if ($page_rows >= $items_per_page) {
          $all_pages++;
          $page_rows = 1;
        }
        else {
          $page_rows++;
        }
        // Unsetting all results but the ones from current page.
        if ($all_pages != $current_page_num) {
          views_merge_rows_unset_row($view, $row_index);
        }
      }
      // Attaching the pager with correct values.
      pager_default_initialize($merged_rows_total_num, $items_per_page);
    }
    $view->total_rows = $total_items;
    $filters[$filter_value] = $row_index;

    // Remove the previous highest or lowest value from the view.
    views_merge_rows_unset_row($view, $merged_row_index);
  }
  $first_value = TRUE;
}

/**
 * Sets data into $view->style_plugin->rendered_fields if merge option is 'count_unique'.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   View object.
 * @param array $merged_row
 *   Current merged row.
 * @param int $row_index
 *   Row index to which data shall be reported if the row
 *   is a filtered one ($merged_rows).
 * @param string $field_name
 *   Name of the field being under work.
 */
function views_merge_rows_render_count_unique(ViewExecutable $view, array &$merged_row, $row_index, $field_name) {
  $view->style_plugin->setRenderedField(count($merged_row[$field_name]), $row_index, $field_name);
}

/**
 * Sets data into $view->style_plugin->rendered_fields if
 * merge option is 'count'.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   View object.
 * @param array $merged_row
 *   Current merged row.
 * @param int $row_index
 *   Row index to which data shall be reported if the row
 *   is a filtered one ($merged_rows).
 * @param string $field_name
 *   Name of the field being under work.
 */
function views_merge_rows_render_count(ViewExecutable $view, array &$merged_row, $row_index, $field_name) {
  $view->style_plugin->setRenderedField($merged_row[$field_name], $row_index, $field_name);
}

/**
 * Sets data into $view->style_plugin->rendered_fields if
 * merge option is 'count_minus_count_unique'.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   View object.
 * @param array $merged_row
 *   Current merged row for the 'count_unique' part.
 * @param array $merged_rows_copy
 *   Current merged row for the 'count' part.
 * @param int $row_index
 *   Row index to which data shall be reported if the row
 *   is a filtered one ($merged_rows).
 * @param string $field_name
 *   Name of the field being under work.
 */
function views_merge_rows_render_count_minus_count_unique(ViewExecutable $view, array &$merged_row, array &$merged_rows_copy, $row_index, $field_name) {
  $view->style_plugin->setRenderedField(intval($merged_rows_copy[$row_index][$field_name]) - count($merged_row[$field_name]), $row_index, $field_name);
}

/**
 * Sets data into $view->style_plugin->rendered_fields if
 * merge option is 'merge_unique'.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   View object.
 * @param array $merged_row
 *   Current merged row.
 * @param int $row_index
 *   Row index to which data shall be reported if the row
 *   is a filtered one ($merged_rows).
 * @param string $field_name
 *   Name of the field being under work.
 */
function views_merge_rows_render_merge_unique(ViewExecutable $view, array &$merged_row, $row_index, $field_name, $field_config) {
  foreach ($merged_row[$field_name] as $field_index => $field_value) {
    if (empty($field_value)) {
      unset($merged_row[$field_name][$field_index]);
    }
  }
  if ($field_config['exclude_first']) {
    array_shift($merged_row[$field_name]);
  }
  $value_count = count($merged_row[$field_name]);
  $i = 1;
  foreach ($merged_row[$field_name] as $field_index => $field_value) {
    if ($i <> $value_count) {
      $merged_row[$field_name][$field_index] = $field_config['prefix'] . $field_value . $field_config['separator'] . $field_config['suffix'];
    }
    else {
      $merged_row[$field_name][$field_index] = $field_config['prefix'] . $field_value . $field_config['suffix'];
    }
    $i++;
  }
  unset($i);
  unset($value_count);
  $view->style_plugin->setRenderedField(implode($merged_row[$field_name]), $row_index, $field_name);
}

/**
 * Sets data into $view->style_plugin->rendered_fields if
 * merge option is 'merge'.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   View object.
 * @param array $merged_row
 *   Current merged row.
 * @param int $row_index
 *   Row index to which data shall be reported if the row
 *   is a filtered one ($merged_rows).
 * @param string $field_name
 *   Name of the field being under work.
 */
function views_merge_rows_render_merge(ViewExecutable $view, array &$merged_row, $row_index, $field_name, $field_config) {
  foreach ($merged_row[$field_name] as $field_index => $field_value) {
    if (empty($field_value)) {
      unset($merged_row[$field_name][$field_index]);
    }
  }
  if ($field_config['exclude_first']) {
    array_shift($merged_row[$field_name]);
  }
  $value_count = count($merged_row[$field_name]);
  $i = 1;
  foreach ($merged_row[$field_name] as $field_index => $field_value) {
    if ($i <> $value_count) {
      $merged_row[$field_name][$field_index] = $field_config['prefix'] . $field_value . $field_config['separator'] . $field_config['suffix'];
    }
    else {
      $merged_row[$field_name][$field_index] = $field_config['prefix'] . $field_value . $field_config['suffix'];
    }
    $i++;
  }
  unset($i);
  unset($value_count);
  $view->style_plugin->setRenderedField(implode($merged_row[$field_name]), $row_index, $field_name);
}

/**
 * Sets data into $view->style_plugin->rendered_fields if
 * merge option is 'sum'.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   View object.
 * @param array $merged_row
 *   Current merged row.
 * @param int $row_index
 *   Row index to which data shall be reported if the row
 *   is a filtered one ($merged_rows).
 * @param string $field_name
 *   Name of the field being under work.
 */
function views_merge_rows_render_sum(ViewExecutable $view, array &$merged_row, $row_index, $field_name) {
  $sum = 0;
  foreach ($merged_row[$field_name] as $field_index => $field_value) {
    if (!empty($field_value)) {
      $sum += floatval((string) $field_value);
    }
  }
  $view->style_plugin->setRenderedField($sum, $row_index, $field_name);
}

/**
 * Sets data into $view->style_plugin->rendered_fields if
 * merge option is 'average'.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   View object.
 * @param array $merged_row
 *   Current merged row.
 * @param int $row_index
 *   Row index to which data shall be reported if the row
 *   is a filtered one ($merged_rows).
 * @param string $field_name
 *   Name of the field being under work.
 */
function views_merge_rows_render_average(ViewExecutable $view, array &$merged_row, $row_index, $field_name) {
  $sum = 0;
  $count_field_values = 0;
  foreach ($merged_row[$field_name] as $field_index => $field_value) {
    if (!empty($field_value)) {
      $sum += floatval((string) $field_value);
      $count_field_values++;
    }
  }
  $sum = $sum / $count_field_values;
  $view->style_plugin->setRenderedField($sum, $row_index, $field_name);
}

/**
 * Sets data into $view->style_plugin->rendered_fields if
 * merge option is 'std_deviation'.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   View object.
 * @param array $merged_row
 *   Current merged row.
 * @param int $row_index
 *   Row index to which data shall be reported if the row
 *   is a filtered one ($merged_rows).
 * @param string $field_name
 *   Name of the field being under work.
 */
function views_merge_rows_render_std_deviation(ViewExecutable $view, array &$merged_row, $row_index, $field_name) {
  $sum = 0;
  $sum_square = 0;
  $count_field_values = 0;
  foreach ($merged_row[$field_name] as $field_index => $field_value) {
    if (!empty($field_value)) {
      $sum += floatval((string) $field_value);
      $sum_square += floatval((string) $field_value) * floatval((string) $field_value);
      $count_field_values++;
    }
  }
  $average = $sum / $count_field_values;
  $average_square = $sum_square / $count_field_values;
  if ($count_field_values = 1) {
    $sum = 0;
  }
  else {
    $sum = ($count_field_values / ($count_field_values - 1)) *
      ($average_square - $average * $average);
    $sum = sqrt($sum);
  }
  $view->style_plugin->setRenderedField($sum, $row_index, $field_name);
}

/**
 * Sets data into $view->style_plugin->rendered_fields if
 * merge option is 'filter'.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   View object.
 * @param array $merged_row
 *   Current merged row.
 * @param int $row_index
 *   Row index to which data shall be reported if the row
 *   is a filtered one ($merged_rows).
 * @param string $field_name
 *   Name of the field being under work.
 */
function views_merge_rows_render_filter(ViewExecutable $view, array &$merged_row, $row_index, $field_name) {
  $view->style_plugin->setRenderedField($merged_row[$field_name], $row_index, $field_name);
}

/**
 * Sets data into $view->style_plugin->rendered_fields if
 * merge option is 'first_value'.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   View object.
 * @param array $merged_row
 *   Current merged row.
 * @param int $row_index
 *   Row index to which data shall be reported if the row
 *   is a filtered one ($merged_rows).
 * @param string $field_name
 *   Name of the field being under work.
 */
function views_merge_rows_render_first_value(ViewExecutable $view, array &$merged_row, $row_index, $field_name) {
  $view->style_plugin->setRenderedField($merged_row[$field_name], $row_index, $field_name);
}

/**
 * Sets data into $view->style_plugin->rendered_fields if
 * merge option is 'highest_value'.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   View object.
 * @param array $merged_row
 *   Current merged row.
 * @param int $row_index
 *   Row index to which data shall be reported if the row
 *   is a filtered one ($merged_rows).
 * @param string $field_name
 *   Name of the field being under work.
 */
function views_merge_rows_render_highest_value(ViewExecutable $view, array &$merged_row, $row_index, $field_name) {
  $view->style_plugin->setRenderedField($merged_row[$field_name], $row_index, $field_name);
}

/**
 * Sets data into $view->style_plugin->rendered_fields if
 * merge option is 'lowest_value'.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   View object.
 * @param array $merged_row
 *   Current merged row.
 * @param int $row_index
 *   Row index to which data shall be reported if the row
 *   is a filtered one ($merged_rows).
 * @param string $field_name
 *   Name of the field being under work.
 */
function views_merge_rows_render_lowest_value(ViewExecutable $view, array &$merged_row, $row_index, $field_name) {
  $view->style_plugin->setRenderedField($merged_row[$field_name], $row_index, $field_name);
}
